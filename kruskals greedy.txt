

import java.util.*;

class KruskalAlgorithm {
    static class Edge implements Comparable<Edge> {
        int source, destination, weight;

        public Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }

        @Override
        public int compareTo(Edge other) {
            return Integer.compare(this.weight, other.weight);
        }
    }

    static class Graph {
        int vertices;
        List<Edge> edges;

        public Graph(int vertices) {
            this.vertices = vertices;
            edges = new ArrayList<>();
        }

        public void addEdge(int source, int destination, int weight) {
            Edge edge = new Edge(source, destination, weight);
            edges.add(edge);
        }

        public void kruskalMST() {
            
            Collections.sort(edges);

            int[] parent = new int[vertices];
            for (int i = 0; i < vertices; i++) {
                parent[i] = i;
            }

            List<Edge> mst = new ArrayList<>();

            for (Edge edge : edges) {
                int rootSource = find(parent, edge.source);
                int rootDest = find(parent, edge.destination);

                if (rootSource != rootDest) {
                    mst.add(edge);
                    parent[rootSource] = rootDest;
                }
            }

            // Print the MST
            System.out.println("Edges in MST:");
            for (Edge edge : mst) {
                System.out.println("Edge: " + edge.source + " - " + edge.destination + " Weight: " + edge.weight);
            }
        }

        private int find(int[] parent, int vertex) {
            if (parent[vertex] != vertex) {
                parent[vertex] = find(parent, parent[vertex]);
            }
            return parent[vertex];
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of vertices: ");
        int V = scanner.nextInt();
        Graph graph = new Graph(V);

        System.out.println("Enter the edges in the format: ");
            while (true) {
            int source = scanner.nextInt();
            if (source == -1) break;
            int destination = scanner.nextInt();
            int weight = scanner.nextInt();
            graph.addEdge(source, destination, weight);
        }

        graph.kruskalMST();
        scanner.close();
    }
}

