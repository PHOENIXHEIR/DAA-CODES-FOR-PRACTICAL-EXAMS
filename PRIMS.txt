import java.util.*;

public class PrimAlgorithm {
    static class Edge {
        int source;
        int destination;
        int weight;

        public Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }
    }

    static class Graph {
        int vertices;
        List<List<Edge>> adjacencyList;

        public Graph(int vertices) {
            this.vertices = vertices;
            adjacencyList = new ArrayList<>(vertices);
            for (int i = 0; i < vertices; i++) {
                adjacencyList.add(new ArrayList<>());
            }
        }

        public void addEdge(int source, int destination, int weight) {
            Edge edge = new Edge(source, destination, weight);
            adjacencyList.get(source).add(edge);

            edge = new Edge(destination, source, weight);
            adjacencyList.get(destination).add(edge);
        }

        public void primMST() {
            boolean[] mstSet = new boolean[vertices];
            int[] parent = new int[vertices];
            int[] key = new int[vertices];

            for (int i = 0; i < vertices; i++) {
                key[i] = Integer.MAX_VALUE;
            }

            PriorityQueue<Edge> priorityQueue = new PriorityQueue<>(vertices, Comparator.comparingInt(e -> e.weight));

            key[0] = 0;
            parent[0] = -1;
            priorityQueue.add(new Edge(-1, 0, 0));

            while (!priorityQueue.isEmpty()) {
                int u = priorityQueue.poll().destination;
                mstSet[u] = true;

                for (Edge edge : adjacencyList.get(u)) {
                    int v = edge.destination;
                    int weight = edge.weight;

                    if (!mstSet[v] && weight < key[v]) {
                        parent[v] = u;
                        key[v] = weight;
                        priorityQueue.add(new Edge(u, v, weight));
                    }
                }
            }

            printMST(parent);
        }

        private void printMST(int[] parent) {
            System.out.println("Edge \tWeight");
            for (int i = 1; i < vertices; i++) {
                System.out.println(parent[i] + " - " + i + "\t" + adjacencyList.get(i).get(parent[i]).weight);
            }
        }
    }

    public static void main(String[] args) {
        int vertices = 5;
        Graph graph = new Graph(vertices);
        graph.addEdge(0, 1, 2);
        graph.addEdge(0, 3, 6);
        graph.addEdge(1, 2, 3);
        graph.addEdge(1, 3, 8);
        graph.addEdge(1, 4, 5);
        graph.addEdge(2, 4, 7);
        graph.addEdge(3, 4, 9);

        graph.primMST();
    }
}

