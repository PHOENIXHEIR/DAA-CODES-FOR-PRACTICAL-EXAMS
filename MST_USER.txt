import java.util.*;

public class KruskalAlgorithm {
    static class Edge implements Comparable<Edge> {
        int source;
        int destination;
        int weight;

        public Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }

        @Override
        public int compareTo(Edge otherEdge) {
            return this.weight - otherEdge.weight;
        }
    }

    static class Subset {
        int parent;
        int rank;
    }

    static class Graph {
        int vertices, edges;
        Edge[] edgeList;

        public Graph(int vertices, int edges) {
            this.vertices = vertices;
            this.edges = edges;
            edgeList = new Edge[edges];
        }

        public void addEdge(int source, int destination, int weight, int edgeCount) {
            edgeList[edgeCount] = new Edge(source, destination, weight);
        }

        private int find(Subset[] subsets, int i) {
            if (subsets[i].parent != i) {
                subsets[i].parent = find(subsets, subsets[i].parent);
            }
            return subsets[i].parent;
        }

        private void union(Subset[] subsets, int x, int y) {
            int xRoot = find(subsets, x);
            int yRoot = find(subsets, y);

            if (subsets[xRoot].rank < subsets[yRoot].rank) {
                subsets[xRoot].parent = yRoot;
            } else if (subsets[xRoot].rank > subsets[yRoot].rank) {
                subsets[yRoot].parent = xRoot;
            } else {
                subsets[yRoot].parent = xRoot;
                subsets[xRoot].rank++;
            }
        }

        public void kruskalMST() {
            Edge[] result = new Edge[vertices];
            int e = 0;
            int i = 0;

            for (i = 0; i < vertices; ++i) {
                result[i] = new Edge(0, 0, 0);
            }

            Arrays.sort(edgeList);

            Subset[] subsets = new Subset[vertices];
            for (i = 0; i < vertices; ++i) {
                subsets[i] = new Subset();
                subsets[i].parent = i;
                subsets[i].rank = 0;
            }

            i = 0;

            while (e < vertices - 1 && i < edges) {
                Edge nextEdge = edgeList[i++];
                int x = find(subsets, nextEdge.source);
                int y = find(subsets, nextEdge.destination);

                if (x != y) {
                    result[e++] = nextEdge;
                    union(subsets, x, y);
                }
            }

            System.out.println("Edges in the Minimum Spanning Tree:");
            for (i = 0; i < e; ++i) {
                System.out.println(result[i].source + " - " + result[i].destination + ": " + result[i].weight);
            }
        }
    }

    public static void main(String[] args) {
        int vertices = 4;
        int edges = 5;

        Graph graph = new Graph(vertices, edges);
        graph.addEdge(0, 1, 10, 0);
        graph.addEdge(0, 2, 6, 1);
        graph.addEdge(0, 3, 5, 2);
        graph.addEdge(1, 3, 15, 3);
        graph.addEdge(2, 3, 4, 4);

        graph.kruskalMST();
    }
}

